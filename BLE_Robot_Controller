/* 
 * BLE Remote Controlled Robot Project
 * 
 * This is a project to setup a BLE unit on a Parallax ShieldBot with an
 * Arduino Uno R3 microcontroller board.  The robot can then be driven
 * using the controller funciton from Adafruit's Bluefruit LE app (iOS/Android)
 * 
 * Parrallax Robotics Shield Kit
 * https://www.parallax.com/product/130-35000
 * 
 * Adafruit Bluefruit LE UART Friend
 * https://www.adafruit.com/product/2479
 * 
 * NOTE: For Serial debugging set baud rate to 115200
 * 
 * Connect the Adafruit controller arrow buttons to move your robot forward, backward,
 * left, and right for as long as the controll button is being held down.  
 * Number buttons 1-4 adjust the speed of the robot.
 * 
 * Based on "BluefruitLE nRF51/controller.ino"
 *   @file     controller.ino
 *   @author   ladyada, ktown (Adafruit Industries)
 */
 
#include <string.h>
#include <Arduino.h>
#include <SPI.h>
#include <SoftwareSerial.h>

// Include files for BLE
#include "Adafruit_BLE.h"
#include "Adafruit_BLE_HWSPI.h"
#include "Adafruit_BluefruitLE_UART.h"

// Include files for Servos
#include <Servo.h>
Servo servoLeft;          // Declare left servo signal
Servo servoRight;         // Declare right servo signal
int max_servo_speed = 20; // default max speed

// If you are using Software Serial....
// The following macros declare the pins used for SW serial, you should
// use these pins if you are connecting the UART Friend to an UNO
#define BLUEFRUIT_UART_RTS_PIN          5    // Optional, set to -1 if unused
#define BLUEFRUIT_SWUART_RXD_PIN        6    // Required for software serial!
#define BLUEFRUIT_SWUART_TXD_PIN        7   // Required for software serial!
#define BLUEFRUIT_UART_CTS_PIN          8   // Required for software serial!

// If you are using Hardware Serial
// The following macros declare the Serial port you are using. Uncomment this
// line if you are connecting the BLE to Leonardo/Micro or Flora
//#define BLUEFRUIT_HWSERIAL_NAME           Serial1

// Other recommended pins!
#define BLUEFRUIT_UART_MODE_PIN         9   // Optional but recommended, set to -1 if unused

/*=========================================================================
    APPLICATION SETTINGS

    VERBOSE_MODE            If set to 1 enables full data output (for
                            debugging), otherwise set it to 0 to disable
                            verbose output
    BLE_READPACKET_TIMEOUT  The timeout in ms waiting for a data packet
    -----------------------------------------------------------------------*/
    #define VERBOSE_MODE                    1
    #define BLE_READPACKET_TIMEOUT          500
/*=========================================================================*/

/* Create the bluefruit object, either software serial... */

SoftwareSerial bluefruitSS = SoftwareSerial(BLUEFRUIT_SWUART_TXD_PIN, BLUEFRUIT_SWUART_RXD_PIN);

Adafruit_BluefruitLE_UART ble(bluefruitSS, BLUEFRUIT_UART_MODE_PIN,
                      BLUEFRUIT_UART_CTS_PIN, BLUEFRUIT_UART_RTS_PIN);

/* ...or hardware serial, which does not need the RTS/CTS pins. Uncomment this line */
//Adafruit_BluefruitLE_UART ble(BLUEFRUIT_HWSERIAL_NAME, BLUEFRUIT_UART_MODE_PIN);


// A small helper
void error(const __FlashStringHelper*err) {
  Serial.println(err);
  while (1);
}

// function prototypes over in packetparser.cpp
uint8_t readPacket(Adafruit_BluefruitLE_UART *ble, uint16_t timeout);
float parsefloat(uint8_t *buffer);
void printHex(const uint8_t * data, const uint32_t numBytes);

// the packet buffer
extern uint8_t packetbuffer[];

void setup(void)
{
  
  // Setup Serial Communication
  while (!Serial);
  delay(500);

  // Setup Servos
  servoLeft.attach(10);
  servoRight.attach(11);
  servoLeft.writeMicroseconds(1500);  // Initial speed is stationary
  servoRight.writeMicroseconds(1500);
  
  Serial.begin(115200);
  Serial.println(F("Adafruit Bluefruit App Controller Example"));
  Serial.println(F("-----------------------------------------"));

  // Initialise the module
  Serial.print(F("Initialising the Bluefruit LE module: "));
  if ( !ble.begin(VERBOSE_MODE) )
  {
    error(F("Couldn't find Bluefruit, make sure it's in CoMmanD mode & check wiring?"));
  }
  Serial.println( F("OK!") );

  // Perform a factory reset to make sure everything is in a known state
  Serial.print(F("Performing a factory reset: "));
  if (! ble.factoryReset() ){
       error(F("Couldn't factory reset"));
  }
  // Disable command echo from Bluefruit
  ble.echo(false);

  Serial.println("Requesting Bluefruit info:");
  // Print Bluefruit information
  ble.info();

  // Change the device name to make it easier to find
  Serial.println(F("Setting device name to 'Bluefruit': "));
  if (! ble.sendCommandCheckOK(F( "AT+GAPDEVNAME=Bluefruit" )) ) { 
    error(F("Could not set device name?"));
  }

  Serial.println(F("Please use Adafruit Bluefruit LE app to connect in Controller mode"));
  Serial.println(F("Then activate game controller"));
  Serial.println();
  
  ble.verbose(false);  // debug info is a little annoying after this point!
  
  // Wait for connection
  while (! ble.isConnected()) {
      delay(500);
  }
  
  Serial.println(F("*****************"));

  // Set module to DATA mode
  if (BLUEFRUIT_UART_MODE_PIN >= 0) {
    Serial.println( F("Switching to DATA mode using the MODE pin!") );
    ble.setModePin(BLUEFRUIT_MODE_DATA);
  } else {
    Serial.println( F("Switching to DATA mode using +++!") );
    ble.println("+++");
    delay(10);
  }

  Serial.println(F("*****************"));
}



void loop(void)
{  
  /* Wait for new data to arrive */
  uint8_t len = readPacket(&ble, BLE_READPACKET_TIMEOUT);
  if (len == 0) return;

  /* Got a packet from BLE iOS Controller */
  // printHex(packetbuffer, len);

/*
  if (packetbuffer[1] == 'B') {
    uint8_t buttnum = packetbuffer[2] - '0';
    boolean pressed = packetbuffer[3] - '0';
    Serial.print ("Button "); Serial.print(buttnum);
    if (pressed) {
      Serial.println(" pressed");
    } else {
      Serial.println(" released");
    }
  }
*/

  if (packetbuffer[1] == 'B') {
    uint8_t buttnum = packetbuffer[2] - '0';
    boolean pressed = packetbuffer[3] - '0';
    Serial.print ("Button "); Serial.print(buttnum);
    if (pressed) {
      Serial.println(" pressed");
    } else {
      Serial.println(" released");
    }
    
    // Make the robot move
    int servo_speed = 0;
    if (pressed) {
      servo_speed = max_servo_speed;
    } else {
      servo_speed = 0;
    }
    switch(buttnum) {
      case 1 :
        Serial.println("Button 1 ops");
        max_servo_speed = 20;
        break;
      case 2 :
        Serial.println("Button 2 ops");
        max_servo_speed = 30;
        break;
      case 3 :
        Serial.println("Button 3 ops");
        max_servo_speed = 40;
        break;
      case 4 :
        Serial.println("Button 4 ops");
        max_servo_speed = 50;
        break;
      case 5 :
        Serial.println("Move forward ops");
        servoLeft.writeMicroseconds(1500+servo_speed);
        servoRight.writeMicroseconds(1500-servo_speed);
        break;
      case 6 :
        Serial.println("Move backward ops");
        servoLeft.writeMicroseconds(1500-servo_speed);
        servoRight.writeMicroseconds(1500+servo_speed);
        break;
      case 7 :
        Serial.println("Turn left ops");
        servoLeft.writeMicroseconds(1500-servo_speed);
        servoRight.writeMicroseconds(1500-servo_speed);
        break;
      case 8 :
        Serial.println("Turn right ops");
        servoLeft.writeMicroseconds(1500+servo_speed);
        servoRight.writeMicroseconds(1500+servo_speed);
        break;
    } 
  }
}
